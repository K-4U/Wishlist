/* tslint:disable */
/* eslint-disable */
/**
 * Apply Default Global SecurityScheme in springdoc-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, RawAxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, RequiredError} from './base';

/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     *
     * @type {Array<ErrorResponseExceptionsInner>}
     * @memberof ErrorResponse
     */
    'exceptions'?: Array<ErrorResponseExceptionsInner>;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponseExceptionsInner
 */
export interface ErrorResponseExceptionsInner {
    /**
     *
     * @type {Array<ErrorResponseExceptionsInnerStackTraceInner>}
     * @memberof ErrorResponseExceptionsInner
     */
    'stackTrace'?: Array<ErrorResponseExceptionsInnerStackTraceInner>;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInner
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInner
     */
    'localizedMessage'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponseExceptionsInnerStackTraceInner
 */
export interface ErrorResponseExceptionsInnerStackTraceInner {
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'classLoaderName'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'moduleName'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'moduleVersion'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'methodName'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'fileName'?: string;
    /**
     *
     * @type {number}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'lineNumber'?: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'className'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'nativeMethod'?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */

export const Event = {
  Christmas: 'CHRISTMAS',
  Birthday: 'BIRTHDAY'
} as const;

export type Event = typeof Event[keyof typeof Event];


/**
 *
 * @export
 * @interface JwtResponse
 */
export interface JwtResponse {
    /**
     *
     * @type {string}
     * @memberof JwtResponse
     */
    'token': string;
    /**
     *
     * @type {UserDTO}
     * @memberof JwtResponse
     */
    'delegate': UserDTO;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 *
 * @export
 * @interface SingleValueWrapperLong
 */
export interface SingleValueWrapperLong {
  /**
   *
   * @type {number}
   * @memberof SingleValueWrapperLong
   */
  'value': number;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {number}
     * @memberof UserDTO
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'dateOfBirth': string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'avatarName': string;
}

/**
 *
 * @export
 * @interface WishlistCreate
 */
export interface WishlistCreate {
  /**
   *
   * @type {string}
   * @memberof WishlistCreate
   */
  'name': string;
  /**
   *
   * @type {string}
   * @memberof WishlistCreate
   */
  'icon': string;
}
/**
 * The wishlist this item is part of
 * @export
 * @interface WishlistDTO
 */
export interface WishlistDTO {
  /**
   *
   * @type {number}
   * @memberof WishlistDTO
     */
  'id': number;
    /**
     *
     * @type {UserDTO}
     * @memberof WishlistDTO
     */
    'owner': UserDTO;
  /**
   *
   * @type {string}
   * @memberof WishlistDTO
   */
  'listName': string;
  /**
   *
   * @type {string}
   * @memberof WishlistDTO
   */
  'icon'?: string;
  /**
   *
   * @type {Array<WishlistItemDTO>}
   * @memberof WishlistDTO
   */
  'items'?: Array<WishlistItemDTO>;
}
/**
 *
 * @export
 * @interface WishlistItemCreate
 */
export interface WishlistItemCreate {
  /**
   *
   * @type {string}
   * @memberof WishlistItemCreate
   */
  'description': string;
  /**
   *
   * @type {string}
   * @memberof WishlistItemCreate
   */
  'url': string;
  /**
   *
   * @type {number}
   * @memberof WishlistItemCreate
   */
  'price': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemCreate
   */
  'remarks'?: string;
}
/**
 *
 * @export
 * @interface WishlistItemDTO
 */
export interface WishlistItemDTO {
  /**
   *
   * @type {number}
   * @memberof WishlistItemDTO
   */
  'id': number;
  /**
   *
   * @type {UserDTO}
   * @memberof WishlistItemDTO
   */
  'owner': UserDTO;
  /**
   *
   * @type {string}
   * @memberof WishlistItemDTO
   */
  'description': string;
  /**
   *
   * @type {string}
   * @memberof WishlistItemDTO
   */
  'url': string;
  /**
   *
   * @type {number}
   * @memberof WishlistItemDTO
   */
  'price': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemDTO
   */
  'addedOn': string;
  /**
   *
   * @type {UserDTO}
   * @memberof WishlistItemDTO
   */
  'purchasedBy'?: UserDTO;
  /**
   *
   * @type {string}
   * @memberof WishlistItemDTO
   */
  'purchasedOn'?: string;
  /**
   *
   * @type {Event}
   * @memberof WishlistItemDTO
   */
  'purchaseEvent'?: Event;
  /**
   *
   * @type {boolean}
   * @memberof WishlistItemDTO
   */
  'deleted': boolean;
  /**
   *
   * @type {WishlistDTO}
   * @memberof WishlistItemDTO
   */
  'wishlist': WishlistDTO;
  /**
   *
   * @type {string}
   * @memberof WishlistItemDTO
   */
  'remarks'?: string;
  /**
   *
   * @type {string}
   * @memberof WishlistItemDTO
   */
  'store': string;
  /**
   * Indicates if the URL is a valid URL
   * @type {boolean}
   * @memberof WishlistItemDTO
   */
  'hasValidUrl': boolean;
}


/**
 *
 * @export
 * @interface WishlistItemUpdate
 */
export interface WishlistItemUpdate {
  /**
   *
   * @type {number}
   * @memberof WishlistItemUpdate
   */
  'wishlistId': number;
  /**
   *
   * @type {number}
   * @memberof WishlistItemUpdate
   */
  'itemId': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemUpdate
   */
  'description': string;
  /**
   *
   * @type {string}
   * @memberof WishlistItemUpdate
   */
  'url': string;
  /**
   *
   * @type {number}
   * @memberof WishlistItemUpdate
   */
  'price': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemUpdate
   */
  'remarks'?: string;
}

/**
 *
 * @export
 * @interface WishlistUpdate
 */
export interface WishlistUpdate {
  /**
   *
   * @type {number}
   * @memberof WishlistUpdate
   */
  'id': number;
  /**
   *
   * @type {string}
   * @memberof WishlistUpdate
   */
  'name': string;
  /**
   *
   * @type {string}
   * @memberof WishlistUpdate
   */
  'icon': string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Login
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doLogin: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('doLogin', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


          localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassPage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/reset-pass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Login
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doLogin(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.doLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassPage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassPage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.resetPassPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         *
         * @summary Login
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<JwtResponse> {
            return localVarFp.doLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassPage(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.resetPassPage(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     *
     * @summary Login
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public doLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).doLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public resetPassPage(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).resetPassPage(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
      /**
       *
       * @param {number} listId
       * @param {WishlistItemCreate} wishlistItemCreate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      addItem: async (listId: number, wishlistItemCreate: WishlistItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('addItem', 'listId', listId)
        // verify required parameter 'wishlistItemCreate' is not null or undefined
        assertParamExists('addItem', 'wishlistItemCreate', wishlistItemCreate)
        const localVarPath = `/api/lists/{listId}/items`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(wishlistItemCreate, localVarRequestOptions, configuration)

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      buyItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('buyItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('buyItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}/buy`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
      /**
       *
       * @summary Create list
       * @param {WishlistCreate} wishlistCreate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      createList: async (wishlistCreate: WishlistCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'wishlistCreate' is not null or undefined
        assertParamExists('createList', 'wishlistCreate', wishlistCreate)
        const localVarPath = `/api/lists/`;
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(wishlistCreate, localVarRequestOptions, configuration)

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      deleteItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('deleteItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('deleteItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
      /**
       *
       * @summary Delete list by ID
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      deleteList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'id' is not null or undefined
        assertParamExists('deleteList', 'id', id)
        const localVarPath = `/api/lists/{id}`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      getItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('getItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('getItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list by ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getListById', 'id', id)
            const localVarPath = `/api/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {SingleValueWrapperLong} singleValueWrapperLong
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      moveItem: async (listId: number, itemId: number, singleValueWrapperLong: SingleValueWrapperLong, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('moveItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('moveItem', 'itemId', itemId)
        // verify required parameter 'singleValueWrapperLong' is not null or undefined
        assertParamExists('moveItem', 'singleValueWrapperLong', singleValueWrapperLong)
        const localVarPath = `/api/lists/{listId}/items/{itemId}/move`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(singleValueWrapperLong, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get own lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownLists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists/own`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {WishlistItemUpdate} wishlistItemUpdate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      saveItem: async (listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('saveItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('saveItem', 'itemId', itemId)
        // verify required parameter 'wishlistItemUpdate' is not null or undefined
        assertParamExists('saveItem', 'wishlistItemUpdate', wishlistItemUpdate)
        const localVarPath = `/api/lists/{listId}/items/{itemId}`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(wishlistItemUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      unbuyItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('unbuyItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('unbuyItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}/unbuy`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
      /**
       *
       * @summary Update list by ID
       * @param {number} id
       * @param {WishlistUpdate} wishlistUpdate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      updateList: async (id: number, wishlistUpdate: WishlistUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'id' is not null or undefined
        assertParamExists('updateList', 'id', id)
        // verify required parameter 'wishlistUpdate' is not null or undefined
        assertParamExists('updateList', 'wishlistUpdate', wishlistUpdate)
        const localVarPath = `/api/lists/{id}`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(wishlistUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} listId
         * @param {WishlistItemCreate} wishlistItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItem(listId: number, wishlistItemCreate: WishlistItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItemDTO>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.addItem(listId, wishlistItemCreate, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.addItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async buyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.buyItem(listId, itemId, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.buyItem']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create list
         * @param {WishlistCreate} wishlistCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createList(wishlistCreate: WishlistCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistDTO>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.createList(wishlistCreate, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.createList']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(listId, itemId, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.deleteItem']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
       * @summary Delete list by ID
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async deleteList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.deleteList(id, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.deleteList']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
      },
      /**
       *
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
      async getAllLists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WishlistDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.getAllLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItemDTO>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(listId, itemId, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.getItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
         * @summary Get list by ID
       * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
      async getListById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.getListById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
      },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {SingleValueWrapperLong} singleValueWrapperLong
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async moveItem(listId: number, itemId: number, singleValueWrapperLong: SingleValueWrapperLong, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.moveItem(listId, itemId, singleValueWrapperLong, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.moveItem']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get own lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ownLists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WishlistDTO>>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.ownLists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.ownLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {WishlistItemUpdate} wishlistItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveItem(listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItemDTO>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.saveItem(listId, itemId, wishlistItemUpdate, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.saveItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async unbuyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.unbuyItem(listId, itemId, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.unbuyItem']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
      },
      /**
       *
       * @summary Update list by ID
       * @param {number} id
       * @param {WishlistUpdate} wishlistUpdate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async updateList(id: number, wishlistUpdate: WishlistUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistDTO>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.updateList(id, wishlistUpdate, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.updateList']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         *
         * @param {number} listId
         * @param {WishlistItemCreate} wishlistItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItem(listId: number, wishlistItemCreate: WishlistItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItemDTO> {
          return localVarFp.addItem(listId, wishlistItemCreate, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
        return localVarFp.buyItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @summary Create list
       * @param {WishlistCreate} wishlistCreate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      createList(wishlistCreate: WishlistCreate, options?: RawAxiosRequestConfig): AxiosPromise<WishlistDTO> {
        return localVarFp.createList(wishlistCreate, options).then((request) => request(axios, basePath));
      },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
        return localVarFp.deleteItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @summary Delete list by ID
       * @param {number} id
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      deleteList(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
        return localVarFp.deleteList(id, options).then((request) => request(axios, basePath));
      },
      /**
       *
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
      getAllLists(options?: RawAxiosRequestConfig): AxiosPromise<Array<WishlistDTO>> {
            return localVarFp.getAllLists(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItemDTO> {
          return localVarFp.getItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
      /**
       *
         * @summary Get list by ID
       * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
      getListById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<WishlistDTO> {
            return localVarFp.getListById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {SingleValueWrapperLong} singleValueWrapperLong
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItem(listId: number, itemId: number, singleValueWrapperLong: SingleValueWrapperLong, options?: RawAxiosRequestConfig): AxiosPromise<void> {
          return localVarFp.moveItem(listId, itemId, singleValueWrapperLong, options).then((request) => request(axios, basePath));
        },
      /**
       *
         * @summary Get own lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
      ownLists(options?: RawAxiosRequestConfig): AxiosPromise<Array<WishlistDTO>> {
        return localVarFp.ownLists(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {WishlistItemUpdate} wishlistItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveItem(listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItemDTO> {
          return localVarFp.saveItem(listId, itemId, wishlistItemUpdate, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      unbuyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
        return localVarFp.unbuyItem(listId, itemId, options).then((request) => request(axios, basePath));
      },
      /**
       *
       * @summary Update list by ID
       * @param {number} id
       * @param {WishlistUpdate} wishlistUpdate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      updateList(id: number, wishlistUpdate: WishlistUpdate, options?: RawAxiosRequestConfig): AxiosPromise<WishlistDTO> {
        return localVarFp.updateList(id, wishlistUpdate, options).then((request) => request(axios, basePath));
      },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
  /**
   *
   * @param {number} listId
   * @param {WishlistItemCreate} wishlistItemCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public addItem(listId: number, wishlistItemCreate: WishlistItemCreate, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).addItem(listId, wishlistItemCreate, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @param {number} listId
     * @param {number} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public buyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
      return ListsApiFp(this.configuration).buyItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @summary Create list
   * @param {WishlistCreate} wishlistCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public createList(wishlistCreate: WishlistCreate, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).createList(wishlistCreate, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public deleteItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).deleteItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete list by ID
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public deleteList(id: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).deleteList(id, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @summary Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public getAllLists(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).getAllLists(options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public getItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).getItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @summary Get list by ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public getListById(id: number, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).getListById(id, options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {SingleValueWrapperLong} singleValueWrapperLong
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public moveItem(listId: number, itemId: number, singleValueWrapperLong: SingleValueWrapperLong, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).moveItem(listId, itemId, singleValueWrapperLong, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @summary Get own lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public ownLists(options?: RawAxiosRequestConfig) {
      return ListsApiFp(this.configuration).ownLists(options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {WishlistItemUpdate} wishlistItemUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public saveItem(listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).saveItem(listId, itemId, wishlistItemUpdate, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @param {number} listId
     * @param {number} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public unbuyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
      return ListsApiFp(this.configuration).unbuyItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @summary Update list by ID
   * @param {number} id
   * @param {WishlistUpdate} wishlistUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public updateList(id: number, wishlistUpdate: WishlistUpdate, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).updateList(id, wishlistUpdate, options).then((request) => request(this.axios, this.basePath));
  }
}



