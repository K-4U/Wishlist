/* tslint:disable */
/* eslint-disable */
/**
 * Apply Default Global SecurityScheme in springdoc-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, RawAxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, RequiredError} from './base';

/**
 *
 * @export
 * @interface BeckersUser
 */
export interface BeckersUser {
    /**
     *
     * @type {number}
     * @memberof BeckersUser
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof BeckersUser
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BeckersUser
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof BeckersUser
     */
    'dateOfBirth': string;
    /**
     *
     * @type {string}
     * @memberof BeckersUser
     */
    'avatarName': string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ErrorResponse
     */
    'code'?: number;
    /**
     *
     * @type {Array<ErrorResponseExceptionsInner>}
     * @memberof ErrorResponse
     */
    'exceptions'?: Array<ErrorResponseExceptionsInner>;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponseExceptionsInner
 */
export interface ErrorResponseExceptionsInner {
    /**
     *
     * @type {Array<ErrorResponseExceptionsInnerStackTraceInner>}
     * @memberof ErrorResponseExceptionsInner
     */
    'stackTrace'?: Array<ErrorResponseExceptionsInnerStackTraceInner>;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInner
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInner
     */
    'localizedMessage'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponseExceptionsInnerStackTraceInner
 */
export interface ErrorResponseExceptionsInnerStackTraceInner {
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'classLoaderName'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'moduleName'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'moduleVersion'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'methodName'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'fileName'?: string;
    /**
     *
     * @type {number}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'lineNumber'?: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'className'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ErrorResponseExceptionsInnerStackTraceInner
     */
    'nativeMethod'?: boolean;
}
/**
 *
 * @export
 * @interface JwtResponse
 */
export interface JwtResponse {
    /**
     *
     * @type {string}
     * @memberof JwtResponse
     */
    'token': string;
    /**
     *
     * @type {BeckersUser}
     * @memberof JwtResponse
     */
    'delegate': BeckersUser;
}
/**
 *
 * @export
 * @interface ListFBO
 */
export interface ListFBO {
    /**
     *
     * @type {Wishlist}
     * @memberof ListFBO
     */
    'delegate'?: Wishlist;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 *
 * @export
 * @interface Wishlist
 */
export interface Wishlist {
    /**
     *
     * @type {number}
     * @memberof Wishlist
     */
    'id': number;
    /**
     *
     * @type {BeckersUser}
     * @memberof Wishlist
     */
    'owner': BeckersUser;
    /**
     *
     * @type {string}
     * @memberof Wishlist
     */
    'listName': string;
    /**
     *
     * @type {string}
     * @memberof Wishlist
     */
    'icon'?: WishlistIconEnum;
}

export const WishlistIconEnum = {
    AddressBook: 'address-book',
    AddressCard: 'address-card',
    Angry: 'angry',
    ArrowAltCircleDown: 'arrow-alt-circle-down',
    ArrowAltCircleLeft: 'arrow-alt-circle-left',
    ArrowAltCircleRight: 'arrow-alt-circle-right',
    ArrowAltCircleUp: 'arrow-alt-circle-up',
    Bell: 'bell',
    BellSlash: 'bell-slash',
    Bookmark: 'bookmark',
    Building: 'building',
    Calendar: 'calendar',
    CalendarAlt: 'calendar-alt',
    CalendarCheck: 'calendar-check',
    CalendarMinus: 'calendar-minus',
    CalendarPlus: 'calendar-plus',
    CalendarTimes: 'calendar-times',
    CaretSquareDown: 'caret-square-down',
    CaretSquareLeft: 'caret-square-left',
    CaretSquareRight: 'caret-square-right',
    CaretSquareUp: 'caret-square-up',
    ChartBar: 'chart-bar',
    CheckCircle: 'check-circle',
    CheckSquare: 'check-square',
    Circle: 'circle',
    Clipboard: 'clipboard',
    Clock: 'clock',
    Clone: 'clone',
    ClosedCaptioning: 'closed-captioning',
    Comment: 'comment',
    CommentAlt: 'comment-alt',
    CommentDots: 'comment-dots',
    Comments: 'comments',
    Compass: 'compass',
    Copy: 'copy',
    Copyright: 'copyright',
    CreditCard: 'credit-card',
    Dizzy: 'dizzy',
    DotCircle: 'dot-circle',
    Edit: 'edit',
    Envelope: 'envelope',
    EnvelopeOpen: 'envelope-open',
    Eye: 'eye',
    EyeSlash: 'eye-slash',
    File: 'file',
    FileAlt: 'file-alt',
    FileArchive: 'file-archive',
    FileAudio: 'file-audio',
    FileCode: 'file-code',
    FileExcel: 'file-excel',
    FileImage: 'file-image',
    FilePdf: 'file-pdf',
    FilePowerpoint: 'file-powerpoint',
    FileVideo: 'file-video',
    FileWord: 'file-word',
    Flag: 'flag',
    Flushed: 'flushed',
    Folder: 'folder',
    FolderOpen: 'folder-open',
    Frown: 'frown',
    FrownOpen: 'frown-open',
    Futbol: 'futbol',
    Gem: 'gem',
    Grimace: 'grimace',
    Grin: 'grin',
    GrinAlt: 'grin-alt',
    GrinBeam: 'grin-beam',
    GrinBeamSweat: 'grin-beam-sweat',
    GrinHearts: 'grin-hearts',
    GrinSquint: 'grin-squint',
    GrinSquintTears: 'grin-squint-tears',
    GrinStars: 'grin-stars',
    GrinTears: 'grin-tears',
    GrinTongue: 'grin-tongue',
    GrinTongueSquint: 'grin-tongue-squint',
    GrinTongueWink: 'grin-tongue-wink',
    GrinWink: 'grin-wink',
    HandLizard: 'hand-lizard',
    HandPaper: 'hand-paper',
    HandPeace: 'hand-peace',
    HandPointDown: 'hand-point-down',
    HandPointLeft: 'hand-point-left',
    HandPointRight: 'hand-point-right',
    HandPointUp: 'hand-point-up',
    HandPointer: 'hand-pointer',
    HandRock: 'hand-rock',
    HandScissors: 'hand-scissors',
    HandSpock: 'hand-spock',
    Handshake: 'handshake',
    Hdd: 'hdd',
    Heart: 'heart',
    Hospital: 'hospital',
    Hourglass: 'hourglass',
    IdBadge: 'id-badge',
    IdCard: 'id-card',
    Image: 'image',
    Images: 'images',
    Keyboard: 'keyboard',
    Kiss: 'kiss',
    KissBeam: 'kiss-beam',
    KissWinkHeart: 'kiss-wink-heart',
    Laugh: 'laugh',
    LaughBeam: 'laugh-beam',
    LaughSquint: 'laugh-squint',
    LaughWink: 'laugh-wink',
    Lemon: 'lemon',
    LifeRing: 'life-ring',
    Lightbulb: 'lightbulb',
    ListAlt: 'list-alt',
    Map: 'map',
    Meh: 'meh',
    MehBlank: 'meh-blank',
    MehRollingEyes: 'meh-rolling-eyes',
    MinusSquare: 'minus-square',
    MoneyBillAlt: 'money-bill-alt',
    Moon: 'moon',
    Newspaper: 'newspaper',
    ObjectGroup: 'object-group',
    ObjectUngroup: 'object-ungroup',
    PaperPlane: 'paper-plane',
    PauseCircle: 'pause-circle',
    PlayCircle: 'play-circle',
    PlusSquare: 'plus-square',
    QuestionCircle: 'question-circle',
    Registered: 'registered',
    SadCry: 'sad-cry',
    SadTear: 'sad-tear',
    Save: 'save',
    ShareSquare: 'share-square',
    Smile: 'smile',
    SmileBeam: 'smile-beam',
    SmileWink: 'smile-wink',
    Snowflake: 'snowflake',
    Square: 'square',
    Star: 'star',
    StarHalf: 'star-half',
    StickyNote: 'sticky-note',
    StopCircle: 'stop-circle',
    Sun: 'sun',
    Surprise: 'surprise',
    ThumbsDown: 'thumbs-down',
    ThumbsUp: 'thumbs-up',
    TimesCircle: 'times-circle',
    Tired: 'tired',
    TrashAlt: 'trash-alt',
    User: 'user',
    UserCircle: 'user-circle',
    WindowClose: 'window-close',
    WindowMaximize: 'window-maximize',
    WindowMinimize: 'window-minimize',
    WindowRestore: 'window-restore',
    Ad: 'ad',
    Adjust: 'adjust',
    AirFreshener: 'air-freshener',
    AlignCenter: 'align-center',
    AlignJustify: 'align-justify',
    AlignLeft: 'align-left',
    AlignRight: 'align-right',
    Allergies: 'allergies',
    Ambulance: 'ambulance',
    AmericanSignLanguageInterpreting: 'american-sign-language-interpreting',
    Anchor: 'anchor',
    AngleDoubleDown: 'angle-double-down',
    AngleDoubleLeft: 'angle-double-left',
    AngleDoubleRight: 'angle-double-right',
    AngleDoubleUp: 'angle-double-up',
    AngleDown: 'angle-down',
    AngleLeft: 'angle-left',
    AngleRight: 'angle-right',
    AngleUp: 'angle-up',
    Ankh: 'ankh',
    AppleAlt: 'apple-alt',
    Archive: 'archive',
    Archway: 'archway',
    ArrowCircleDown: 'arrow-circle-down',
    ArrowCircleLeft: 'arrow-circle-left',
    ArrowCircleRight: 'arrow-circle-right',
    ArrowCircleUp: 'arrow-circle-up',
    ArrowDown: 'arrow-down',
    ArrowLeft: 'arrow-left',
    ArrowRight: 'arrow-right',
    ArrowUp: 'arrow-up',
    ArrowsAlt: 'arrows-alt',
    ArrowsAltH: 'arrows-alt-h',
    ArrowsAltV: 'arrows-alt-v',
    AssistiveListeningSystems: 'assistive-listening-systems',
    Asterisk: 'asterisk',
    At: 'at',
    Atlas: 'atlas',
    Atom: 'atom',
    AudioDescription: 'audio-description',
    Award: 'award',
    Backspace: 'backspace',
    Backward: 'backward',
    BalanceScale: 'balance-scale',
    Ban: 'ban',
    BandAid: 'band-aid',
    Barcode: 'barcode',
    Bars: 'bars',
    BaseballBall: 'baseball-ball',
    BasketballBall: 'basketball-ball',
    Bath: 'bath',
    BatteryEmpty: 'battery-empty',
    BatteryFull: 'battery-full',
    BatteryHalf: 'battery-half',
    BatteryQuarter: 'battery-quarter',
    BatteryThreeQuarters: 'battery-three-quarters',
    Bed: 'bed',
    Beer: 'beer',
    BezierCurve: 'bezier-curve',
    Bible: 'bible',
    Bicycle: 'bicycle',
    Binoculars: 'binoculars',
    BirthdayCake: 'birthday-cake',
    Blender: 'blender',
    BlenderPhone: 'blender-phone',
    Blind: 'blind',
    Bold: 'bold',
    Bolt: 'bolt',
    Bomb: 'bomb',
    Bone: 'bone',
    Bong: 'bong',
    Book: 'book',
    BookDead: 'book-dead',
    BookOpen: 'book-open',
    BookReader: 'book-reader',
    BowlingBall: 'bowling-ball',
    Box: 'box',
    BoxOpen: 'box-open',
    Boxes: 'boxes',
    Braille: 'braille',
    Brain: 'brain',
    Briefcase: 'briefcase',
    BriefcaseMedical: 'briefcase-medical',
    BroadcastTower: 'broadcast-tower',
    Broom: 'broom',
    Brush: 'brush',
    Bug: 'bug',
    Bullhorn: 'bullhorn',
    Bullseye: 'bullseye',
    Burn: 'burn',
    Bus: 'bus',
    BusAlt: 'bus-alt',
    BusinessTime: 'business-time',
    Calculator: 'calculator',
    Camera: 'camera',
    CameraRetro: 'camera-retro',
    Campground: 'campground',
    Cannabis: 'cannabis',
    Capsules: 'capsules',
    Car: 'car',
    CarAlt: 'car-alt',
    CarBattery: 'car-battery',
    CarCrash: 'car-crash',
    CarSide: 'car-side',
    CaretDown: 'caret-down',
    CaretLeft: 'caret-left',
    CaretRight: 'caret-right',
    CaretUp: 'caret-up',
    CartArrowDown: 'cart-arrow-down',
    CartPlus: 'cart-plus',
    Cat: 'cat',
    Certificate: 'certificate',
    Chair: 'chair',
    Chalkboard: 'chalkboard',
    ChalkboardTeacher: 'chalkboard-teacher',
    ChargingStation: 'charging-station',
    ChartArea: 'chart-area',
    ChartLine: 'chart-line',
    ChartPie: 'chart-pie',
    Check: 'check',
    CheckDouble: 'check-double',
    Chess: 'chess',
    ChessBishop: 'chess-bishop',
    ChessBoard: 'chess-board',
    ChessKing: 'chess-king',
    ChessKnight: 'chess-knight',
    ChessPawn: 'chess-pawn',
    ChessQueen: 'chess-queen',
    ChessRook: 'chess-rook',
    ChevronCircleDown: 'chevron-circle-down',
    ChevronCircleLeft: 'chevron-circle-left',
    ChevronCircleRight: 'chevron-circle-right',
    ChevronCircleUp: 'chevron-circle-up',
    ChevronDown: 'chevron-down',
    ChevronLeft: 'chevron-left',
    ChevronRight: 'chevron-right',
    ChevronUp: 'chevron-up',
    Child: 'child',
    Church: 'church',
    CircleNotch: 'circle-notch',
    City: 'city',
    ClipboardCheck: 'clipboard-check',
    ClipboardList: 'clipboard-list',
    Cloud: 'cloud',
    CloudDownloadAlt: 'cloud-download-alt',
    CloudMeatball: 'cloud-meatball',
    CloudMoon: 'cloud-moon',
    CloudMoonRain: 'cloud-moon-rain',
    CloudRain: 'cloud-rain',
    CloudShowersHeavy: 'cloud-showers-heavy',
    CloudSun: 'cloud-sun',
    CloudSunRain: 'cloud-sun-rain',
    CloudUploadAlt: 'cloud-upload-alt',
    Cocktail: 'cocktail',
    Code: 'code',
    CodeBranch: 'code-branch',
    Coffee: 'coffee',
    Cog: 'cog',
    Cogs: 'cogs',
    Coins: 'coins',
    Columns: 'columns',
    CommentDollar: 'comment-dollar',
    CommentSlash: 'comment-slash',
    CommentsDollar: 'comments-dollar',
    CompactDisc: 'compact-disc',
    Compress: 'compress',
    ConciergeBell: 'concierge-bell',
    Cookie: 'cookie',
    CookieBite: 'cookie-bite',
    Couch: 'couch',
    Crop: 'crop',
    CropAlt: 'crop-alt',
    Cross: 'cross',
    Crosshairs: 'crosshairs',
    Crow: 'crow',
    Crown: 'crown',
    Cube: 'cube',
    Cubes: 'cubes',
    Cut: 'cut',
    Database: 'database',
    Deaf: 'deaf',
    Democrat: 'democrat',
    Desktop: 'desktop',
    Dharmachakra: 'dharmachakra',
    Diagnoses: 'diagnoses',
    Dice: 'dice',
    DiceD20: 'dice-d20',
    DiceD6: 'dice-d6',
    DiceFive: 'dice-five',
    DiceFour: 'dice-four',
    DiceOne: 'dice-one',
    DiceSix: 'dice-six',
    DiceThree: 'dice-three',
    DiceTwo: 'dice-two',
    DigitalTachograph: 'digital-tachograph',
    Directions: 'directions',
    Divide: 'divide',
    Dna: 'dna',
    Dog: 'dog',
    DollarSign: 'dollar-sign',
    Dolly: 'dolly',
    DollyFlatbed: 'dolly-flatbed',
    Donate: 'donate',
    DoorClosed: 'door-closed',
    DoorOpen: 'door-open',
    Dove: 'dove',
    Download: 'download',
    DraftingCompass: 'drafting-compass',
    Dragon: 'dragon',
    DrawPolygon: 'draw-polygon',
    Drum: 'drum',
    DrumSteelpan: 'drum-steelpan',
    DrumstickBite: 'drumstick-bite',
    Dumbbell: 'dumbbell',
    Dungeon: 'dungeon',
    Eject: 'eject',
    EllipsisH: 'ellipsis-h',
    EllipsisV: 'ellipsis-v',
    EnvelopeOpenText: 'envelope-open-text',
    EnvelopeSquare: 'envelope-square',
    Equals: 'equals',
    Eraser: 'eraser',
    EuroSign: 'euro-sign',
    ExchangeAlt: 'exchange-alt',
    Exclamation: 'exclamation',
    ExclamationCircle: 'exclamation-circle',
    ExclamationTriangle: 'exclamation-triangle',
    Expand: 'expand',
    ExpandArrowsAlt: 'expand-arrows-alt',
    ExternalLinkAlt: 'external-link-alt',
    ExternalLinkSquareAlt: 'external-link-square-alt',
    EyeDropper: 'eye-dropper',
    FastBackward: 'fast-backward',
    FastForward: 'fast-forward',
    Fax: 'fax',
    Feather: 'feather',
    FeatherAlt: 'feather-alt',
    Female: 'female',
    FighterJet: 'fighter-jet',
    FileContract: 'file-contract',
    FileCsv: 'file-csv',
    FileDownload: 'file-download',
    FileExport: 'file-export',
    FileImport: 'file-import',
    FileInvoice: 'file-invoice',
    FileInvoiceDollar: 'file-invoice-dollar',
    FileMedical: 'file-medical',
    FileMedicalAlt: 'file-medical-alt',
    FilePrescription: 'file-prescription',
    FileSignature: 'file-signature',
    FileUpload: 'file-upload',
    Fill: 'fill',
    FillDrip: 'fill-drip',
    Film: 'film',
    Filter: 'filter',
    Fingerprint: 'fingerprint',
    Fire: 'fire',
    FireExtinguisher: 'fire-extinguisher',
    FirstAid: 'first-aid',
    Fish: 'fish',
    FistRaised: 'fist-raised',
    FlagCheckered: 'flag-checkered',
    FlagUsa: 'flag-usa',
    Flask: 'flask',
    FolderMinus: 'folder-minus',
    FolderPlus: 'folder-plus',
    Font: 'font',
    FootballBall: 'football-ball',
    Forward: 'forward',
    Frog: 'frog',
    FunnelDollar: 'funnel-dollar',
    Gamepad: 'gamepad',
    GasPump: 'gas-pump',
    Gavel: 'gavel',
    Genderless: 'genderless',
    Ghost: 'ghost',
    Gift: 'gift',
    GlassMartini: 'glass-martini',
    GlassMartiniAlt: 'glass-martini-alt',
    Glasses: 'glasses',
    Globe: 'globe',
    GlobeAfrica: 'globe-africa',
    GlobeAmericas: 'globe-americas',
    GlobeAsia: 'globe-asia',
    GolfBall: 'golf-ball',
    Gopuram: 'gopuram',
    GraduationCap: 'graduation-cap',
    GreaterThan: 'greater-than',
    GreaterThanEqual: 'greater-than-equal',
    GripHorizontal: 'grip-horizontal',
    GripVertical: 'grip-vertical',
    HSquare: 'h-square',
    Hammer: 'hammer',
    Hamsa: 'hamsa',
    HandHolding: 'hand-holding',
    HandHoldingHeart: 'hand-holding-heart',
    HandHoldingUsd: 'hand-holding-usd',
    Hands: 'hands',
    HandsHelping: 'hands-helping',
    Hanukiah: 'hanukiah',
    Hashtag: 'hashtag',
    HatWizard: 'hat-wizard',
    Haykal: 'haykal',
    Heading: 'heading',
    Headphones: 'headphones',
    HeadphonesAlt: 'headphones-alt',
    Headset: 'headset',
    Heartbeat: 'heartbeat',
    Helicopter: 'helicopter',
    Highlighter: 'highlighter',
    Hiking: 'hiking',
    Hippo: 'hippo',
    History: 'history',
    HockeyPuck: 'hockey-puck',
    Home: 'home',
    Horse: 'horse',
    HospitalAlt: 'hospital-alt',
    HospitalSymbol: 'hospital-symbol',
    HotTub: 'hot-tub',
    Hotel: 'hotel',
    HourglassEnd: 'hourglass-end',
    HourglassHalf: 'hourglass-half',
    HourglassStart: 'hourglass-start',
    HouseDamage: 'house-damage',
    Hryvnia: 'hryvnia',
    ICursor: 'i-cursor',
    IdCardAlt: 'id-card-alt',
    Inbox: 'inbox',
    Indent: 'indent',
    Industry: 'industry',
    Infinity: 'infinity',
    Info: 'info',
    InfoCircle: 'info-circle',
    Italic: 'italic',
    Jedi: 'jedi',
    Joint: 'joint',
    JournalWhills: 'journal-whills',
    Kaaba: 'kaaba',
    Key: 'key',
    Khanda: 'khanda',
    KiwiBird: 'kiwi-bird',
    Landmark: 'landmark',
    Language: 'language',
    Laptop: 'laptop',
    LaptopCode: 'laptop-code',
    LayerGroup: 'layer-group',
    Leaf: 'leaf',
    LessThan: 'less-than',
    LessThanEqual: 'less-than-equal',
    LevelDownAlt: 'level-down-alt',
    LevelUpAlt: 'level-up-alt',
    Link: 'link',
    LiraSign: 'lira-sign',
    List: 'list',
    ListOl: 'list-ol',
    ListUl: 'list-ul',
    LocationArrow: 'location-arrow',
    Lock: 'lock',
    LockOpen: 'lock-open',
    LongArrowAltDown: 'long-arrow-alt-down',
    LongArrowAltLeft: 'long-arrow-alt-left',
    LongArrowAltRight: 'long-arrow-alt-right',
    LongArrowAltUp: 'long-arrow-alt-up',
    LowVision: 'low-vision',
    LuggageCart: 'luggage-cart',
    Magic: 'magic',
    Magnet: 'magnet',
    MailBulk: 'mail-bulk',
    Male: 'male',
    MapMarked: 'map-marked',
    MapMarkedAlt: 'map-marked-alt',
    MapMarker: 'map-marker',
    MapMarkerAlt: 'map-marker-alt',
    MapPin: 'map-pin',
    MapSigns: 'map-signs',
    Marker: 'marker',
    Mars: 'mars',
    MarsDouble: 'mars-double',
    MarsStroke: 'mars-stroke',
    MarsStrokeH: 'mars-stroke-h',
    MarsStrokeV: 'mars-stroke-v',
    Mask: 'mask',
    Medal: 'medal',
    Medkit: 'medkit',
    Memory: 'memory',
    Menorah: 'menorah',
    Mercury: 'mercury',
    Meteor: 'meteor',
    Microchip: 'microchip',
    Microphone: 'microphone',
    MicrophoneAlt: 'microphone-alt',
    MicrophoneAltSlash: 'microphone-alt-slash',
    MicrophoneSlash: 'microphone-slash',
    Microscope: 'microscope',
    Minus: 'minus',
    MinusCircle: 'minus-circle',
    Mobile: 'mobile',
    MobileAlt: 'mobile-alt',
    MoneyBill: 'money-bill',
    MoneyBillWave: 'money-bill-wave',
    MoneyBillWaveAlt: 'money-bill-wave-alt',
    MoneyCheck: 'money-check',
    MoneyCheckAlt: 'money-check-alt',
    Monument: 'monument',
    MortarPestle: 'mortar-pestle',
    Mosque: 'mosque',
    Motorcycle: 'motorcycle',
    Mountain: 'mountain',
    MousePointer: 'mouse-pointer',
    Music: 'music',
    NetworkWired: 'network-wired',
    Neuter: 'neuter',
    NotEqual: 'not-equal',
    NotesMedical: 'notes-medical',
    OilCan: 'oil-can',
    Om: 'om',
    Otter: 'otter',
    Outdent: 'outdent',
    PaintBrush: 'paint-brush',
    PaintRoller: 'paint-roller',
    Palette: 'palette',
    Pallet: 'pallet',
    Paperclip: 'paperclip',
    ParachuteBox: 'parachute-box',
    Paragraph: 'paragraph',
    Parking: 'parking',
    Passport: 'passport',
    Pastafarianism: 'pastafarianism',
    Paste: 'paste',
    Pause: 'pause',
    Paw: 'paw',
    Peace: 'peace',
    Pen: 'pen',
    PenAlt: 'pen-alt',
    PenFancy: 'pen-fancy',
    PenNib: 'pen-nib',
    PenSquare: 'pen-square',
    PencilAlt: 'pencil-alt',
    PencilRuler: 'pencil-ruler',
    PeopleCarry: 'people-carry',
    Percent: 'percent',
    Percentage: 'percentage',
    PersonBooth: 'person-booth',
    Phone: 'phone',
    PhoneSlash: 'phone-slash',
    PhoneSquare: 'phone-square',
    PhoneVolume: 'phone-volume',
    PiggyBank: 'piggy-bank',
    Pills: 'pills',
    PlaceOfWorship: 'place-of-worship',
    Plane: 'plane',
    PlaneArrival: 'plane-arrival',
    PlaneDeparture: 'plane-departure',
    Play: 'play',
    Plug: 'plug',
    Plus: 'plus',
    PlusCircle: 'plus-circle',
    Podcast: 'podcast',
    Poll: 'poll',
    PollH: 'poll-h',
    Poo: 'poo',
    PooStorm: 'poo-storm',
    Poop: 'poop',
    Portrait: 'portrait',
    PoundSign: 'pound-sign',
    PowerOff: 'power-off',
    Pray: 'pray',
    PrayingHands: 'praying-hands',
    Prescription: 'prescription',
    PrescriptionBottle: 'prescription-bottle',
    PrescriptionBottleAlt: 'prescription-bottle-alt',
    Print: 'print',
    Procedures: 'procedures',
    ProjectDiagram: 'project-diagram',
    PuzzlePiece: 'puzzle-piece',
    Qrcode: 'qrcode',
    Question: 'question',
    Quidditch: 'quidditch',
    QuoteLeft: 'quote-left',
    QuoteRight: 'quote-right',
    Quran: 'quran',
    Rainbow: 'rainbow',
    Random: 'random',
    Receipt: 'receipt',
    Recycle: 'recycle',
    Redo: 'redo',
    RedoAlt: 'redo-alt',
    Reply: 'reply',
    ReplyAll: 'reply-all',
    Republican: 'republican',
    Retweet: 'retweet',
    Ribbon: 'ribbon',
    Ring: 'ring',
    Road: 'road',
    Robot: 'robot',
    Rocket: 'rocket',
    Route: 'route',
    Rss: 'rss',
    RssSquare: 'rss-square',
    RubleSign: 'ruble-sign',
    Ruler: 'ruler',
    RulerCombined: 'ruler-combined',
    RulerHorizontal: 'ruler-horizontal',
    RulerVertical: 'ruler-vertical',
    Running: 'running',
    RupeeSign: 'rupee-sign',
    School: 'school',
    Screwdriver: 'screwdriver',
    Scroll: 'scroll',
    Search: 'search',
    SearchDollar: 'search-dollar',
    SearchLocation: 'search-location',
    SearchMinus: 'search-minus',
    SearchPlus: 'search-plus',
    Seedling: 'seedling',
    Server: 'server',
    Shapes: 'shapes',
    Share: 'share',
    ShareAlt: 'share-alt',
    ShareAltSquare: 'share-alt-square',
    ShekelSign: 'shekel-sign',
    ShieldAlt: 'shield-alt',
    Ship: 'ship',
    ShippingFast: 'shipping-fast',
    ShoePrints: 'shoe-prints',
    ShoppingBag: 'shopping-bag',
    ShoppingBasket: 'shopping-basket',
    ShoppingCart: 'shopping-cart',
    Shower: 'shower',
    ShuttleVan: 'shuttle-van',
    Sign: 'sign',
    SignInAlt: 'sign-in-alt',
    SignLanguage: 'sign-language',
    SignOutAlt: 'sign-out-alt',
    Signal: 'signal',
    Signature: 'signature',
    Sitemap: 'sitemap',
    Skull: 'skull',
    SkullCrossbones: 'skull-crossbones',
    Slash: 'slash',
    SlidersH: 'sliders-h',
    Smog: 'smog',
    Smoking: 'smoking',
    SmokingBan: 'smoking-ban',
    Socks: 'socks',
    SolarPanel: 'solar-panel',
    Sort: 'sort',
    SortAlphaDown: 'sort-alpha-down',
    SortAlphaUp: 'sort-alpha-up',
    SortAmountDown: 'sort-amount-down',
    SortAmountUp: 'sort-amount-up',
    SortDown: 'sort-down',
    SortNumericDown: 'sort-numeric-down',
    SortNumericUp: 'sort-numeric-up',
    SortUp: 'sort-up',
    Spa: 'spa',
    SpaceShuttle: 'space-shuttle',
    Spider: 'spider',
    Spinner: 'spinner',
    Splotch: 'splotch',
    SprayCan: 'spray-can',
    SquareFull: 'square-full',
    SquareRootAlt: 'square-root-alt',
    Stamp: 'stamp',
    StarAndCrescent: 'star-and-crescent',
    StarHalfAlt: 'star-half-alt',
    StarOfDavid: 'star-of-david',
    StarOfLife: 'star-of-life',
    StepBackward: 'step-backward',
    StepForward: 'step-forward',
    Stethoscope: 'stethoscope',
    Stop: 'stop',
    Stopwatch: 'stopwatch',
    Store: 'store',
    StoreAlt: 'store-alt',
    Stream: 'stream',
    StreetView: 'street-view',
    Strikethrough: 'strikethrough',
    Stroopwafel: 'stroopwafel',
    Subscript: 'subscript',
    Subway: 'subway',
    Suitcase: 'suitcase',
    SuitcaseRolling: 'suitcase-rolling',
    Superscript: 'superscript',
    Swatchbook: 'swatchbook',
    Swimmer: 'swimmer',
    SwimmingPool: 'swimming-pool',
    Synagogue: 'synagogue',
    Sync: 'sync',
    SyncAlt: 'sync-alt',
    Syringe: 'syringe',
    Table: 'table',
    TableTennis: 'table-tennis',
    Tablet: 'tablet',
    TabletAlt: 'tablet-alt',
    Tablets: 'tablets',
    TachometerAlt: 'tachometer-alt',
    Tag: 'tag',
    Tags: 'tags',
    Tape: 'tape',
    Tasks: 'tasks',
    Taxi: 'taxi',
    Teeth: 'teeth',
    TeethOpen: 'teeth-open',
    TemperatureHigh: 'temperature-high',
    TemperatureLow: 'temperature-low',
    Terminal: 'terminal',
    TextHeight: 'text-height',
    TextWidth: 'text-width',
    Th: 'th',
    ThLarge: 'th-large',
    ThList: 'th-list',
    TheaterMasks: 'theater-masks',
    Thermometer: 'thermometer',
    ThermometerEmpty: 'thermometer-empty',
    ThermometerFull: 'thermometer-full',
    ThermometerHalf: 'thermometer-half',
    ThermometerQuarter: 'thermometer-quarter',
    ThermometerThreeQuarters: 'thermometer-three-quarters',
    Thumbtack: 'thumbtack',
    TicketAlt: 'ticket-alt',
    Times: 'times',
    Tint: 'tint',
    TintSlash: 'tint-slash',
    ToggleOff: 'toggle-off',
    ToggleOn: 'toggle-on',
    ToiletPaper: 'toilet-paper',
    Toolbox: 'toolbox',
    Tooth: 'tooth',
    Torah: 'torah',
    ToriiGate: 'torii-gate',
    Tractor: 'tractor',
    Trademark: 'trademark',
    TrafficLight: 'traffic-light',
    Train: 'train',
    Transgender: 'transgender',
    TransgenderAlt: 'transgender-alt',
    Trash: 'trash',
    Tree: 'tree',
    Trophy: 'trophy',
    Truck: 'truck',
    TruckLoading: 'truck-loading',
    TruckMonster: 'truck-monster',
    TruckMoving: 'truck-moving',
    TruckPickup: 'truck-pickup',
    Tshirt: 'tshirt',
    Tty: 'tty',
    Tv: 'tv',
    Umbrella: 'umbrella',
    UmbrellaBeach: 'umbrella-beach',
    Underline: 'underline',
    Undo: 'undo',
    UndoAlt: 'undo-alt',
    UniversalAccess: 'universal-access',
    University: 'university',
    Unlink: 'unlink',
    Unlock: 'unlock',
    UnlockAlt: 'unlock-alt',
    Upload: 'upload',
    UserAlt: 'user-alt',
    UserAltSlash: 'user-alt-slash',
    UserAstronaut: 'user-astronaut',
    UserCheck: 'user-check',
    UserClock: 'user-clock',
    UserCog: 'user-cog',
    UserEdit: 'user-edit',
    UserFriends: 'user-friends',
    UserGraduate: 'user-graduate',
    UserInjured: 'user-injured',
    UserLock: 'user-lock',
    UserMd: 'user-md',
    UserMinus: 'user-minus',
    UserNinja: 'user-ninja',
    UserPlus: 'user-plus',
    UserSecret: 'user-secret',
    UserShield: 'user-shield',
    UserSlash: 'user-slash',
    UserTag: 'user-tag',
    UserTie: 'user-tie',
    UserTimes: 'user-times',
    Users: 'users',
    UsersCog: 'users-cog',
    UtensilSpoon: 'utensil-spoon',
    Utensils: 'utensils',
    VectorSquare: 'vector-square',
    Venus: 'venus',
    VenusDouble: 'venus-double',
    VenusMars: 'venus-mars',
    Vial: 'vial',
    Vials: 'vials',
    Video: 'video',
    VideoSlash: 'video-slash',
    Vihara: 'vihara',
    VolleyballBall: 'volleyball-ball',
    VolumeDown: 'volume-down',
    VolumeMute: 'volume-mute',
    VolumeOff: 'volume-off',
    VolumeUp: 'volume-up',
    VoteYea: 'vote-yea',
    VrCardboard: 'vr-cardboard',
    Walking: 'walking',
    Wallet: 'wallet',
    Warehouse: 'warehouse',
    Water: 'water',
    Weight: 'weight',
    WeightHanging: 'weight-hanging',
    Wheelchair: 'wheelchair',
    Wifi: 'wifi',
    Wind: 'wind',
    AccessibleIcon: 'accessible-icon',
    Accusoft: 'accusoft',
    AcquisitionsIncorporated: 'acquisitions-incorporated',
    Adn: 'adn',
    Adversal: 'adversal',
    Affiliatetheme: 'affiliatetheme',
    Algolia: 'algolia',
    Alipay: 'alipay',
    Amazon: 'amazon',
    AmazonPay: 'amazon-pay',
    Amilia: 'amilia',
    Android: 'android',
    Angellist: 'angellist',
    Angrycreative: 'angrycreative',
    Angular: 'angular',
    AppStore: 'app-store',
    AppStoreIos: 'app-store-ios',
    Apper: 'apper',
    Apple: 'apple',
    ApplePay: 'apple-pay',
    Asymmetrik: 'asymmetrik',
    Audible: 'audible',
    Autoprefixer: 'autoprefixer',
    Avianex: 'avianex',
    Aviato: 'aviato',
    Aws: 'aws',
    Bandcamp: 'bandcamp',
    Behance: 'behance',
    BehanceSquare: 'behance-square',
    Bimobject: 'bimobject',
    Bitbucket: 'bitbucket',
    Bitcoin: 'bitcoin',
    Bity: 'bity',
    BlackTie: 'black-tie',
    Blackberry: 'blackberry',
    Blogger: 'blogger',
    BloggerB: 'blogger-b',
    Bluetooth: 'bluetooth',
    BluetoothB: 'bluetooth-b',
    Btc: 'btc',
    Buromobelexperte: 'buromobelexperte',
    Buysellads: 'buysellads',
    CcAmazonPay: 'cc-amazon-pay',
    CcAmex: 'cc-amex',
    CcApplePay: 'cc-apple-pay',
    CcDinersClub: 'cc-diners-club',
    CcDiscover: 'cc-discover',
    CcJcb: 'cc-jcb',
    CcMastercard: 'cc-mastercard',
    CcPaypal: 'cc-paypal',
    CcStripe: 'cc-stripe',
    CcVisa: 'cc-visa',
    Centercode: 'centercode',
    Chrome: 'chrome',
    Cloudscale: 'cloudscale',
    Cloudsmith: 'cloudsmith',
    Cloudversify: 'cloudversify',
    Codepen: 'codepen',
    Codiepie: 'codiepie',
    Connectdevelop: 'connectdevelop',
    Contao: 'contao',
    Cpanel: 'cpanel',
    CreativeCommons: 'creative-commons',
    CreativeCommonsBy: 'creative-commons-by',
    CreativeCommonsNc: 'creative-commons-nc',
    CreativeCommonsNcEu: 'creative-commons-nc-eu',
    CreativeCommonsNcJp: 'creative-commons-nc-jp',
    CreativeCommonsNd: 'creative-commons-nd',
    CreativeCommonsPd: 'creative-commons-pd',
    CreativeCommonsPdAlt: 'creative-commons-pd-alt',
    CreativeCommonsRemix: 'creative-commons-remix',
    CreativeCommonsSa: 'creative-commons-sa',
    CreativeCommonsSampling: 'creative-commons-sampling',
    CreativeCommonsSamplingPlus: 'creative-commons-sampling-plus',
    CreativeCommonsShare: 'creative-commons-share',
    CreativeCommonsZero: 'creative-commons-zero',
    CriticalRole: 'critical-role',
    Css3: 'css3',
    Css3Alt: 'css3-alt',
    Cuttlefish: 'cuttlefish',
    DAndD: 'd-and-d',
    DAndDBeyond: 'd-and-d-beyond',
    Dashcube: 'dashcube',
    Delicious: 'delicious',
    Deploydog: 'deploydog',
    Deskpro: 'deskpro',
    Dev: 'dev',
    Deviantart: 'deviantart',
    Digg: 'digg',
    DigitalOcean: 'digital-ocean',
    Discord: 'discord',
    Discourse: 'discourse',
    Dochub: 'dochub',
    Docker: 'docker',
    Draft2Digital: 'draft2-digital',
    Dribbble: 'dribbble',
    DribbbleSquare: 'dribbble-square',
    Dropbox: 'dropbox',
    Drupal: 'drupal',
    Dyalog: 'dyalog',
    Earlybirds: 'earlybirds',
    Ebay: 'ebay',
    Edge: 'edge',
    Elementor: 'elementor',
    Ello: 'ello',
    Ember: 'ember',
    Empire: 'empire',
    Envira: 'envira',
    Erlang: 'erlang',
    Ethereum: 'ethereum',
    Etsy: 'etsy',
    Expeditedssl: 'expeditedssl',
    Facebook: 'facebook',
    FacebookF: 'facebook-f',
    FacebookMessenger: 'facebook-messenger',
    FacebookSquare: 'facebook-square',
    FantasyFlightGames: 'fantasy-flight-games',
    Firefox: 'firefox',
    FirstOrder: 'first-order',
    FirstOrderAlt: 'first-order-alt',
    Firstdraft: 'firstdraft',
    Flickr: 'flickr',
    Flipboard: 'flipboard',
    Fly: 'fly',
    FontAwesome: 'font-awesome',
    FontAwesomeAlt: 'font-awesome-alt',
    FontAwesomeFlag: 'font-awesome-flag',
    Fonticons: 'fonticons',
    FonticonsFi: 'fonticons-fi',
    FortAwesome: 'fort-awesome',
    FortAwesomeAlt: 'fort-awesome-alt',
    Forumbee: 'forumbee',
    Foursquare: 'foursquare',
    FreeCodeCamp: 'free-code-camp',
    Freebsd: 'freebsd',
    Fulcrum: 'fulcrum',
    GalacticRepublic: 'galactic-republic',
    GalacticSenate: 'galactic-senate',
    GetPocket: 'get-pocket',
    Gg: 'gg',
    GgCircle: 'gg-circle',
    Git: 'git',
    GitSquare: 'git-square',
    Github: 'github',
    GithubAlt: 'github-alt',
    GithubSquare: 'github-square',
    Gitkraken: 'gitkraken',
    Gitlab: 'gitlab',
    Gitter: 'gitter',
    Glide: 'glide',
    GlideG: 'glide-g',
    Gofore: 'gofore',
    Goodreads: 'goodreads',
    GoodreadsG: 'goodreads-g',
    Google: 'google',
    GoogleDrive: 'google-drive',
    GooglePlay: 'google-play',
    GooglePlus: 'google-plus',
    GooglePlusG: 'google-plus-g',
    GooglePlusSquare: 'google-plus-square',
    GoogleWallet: 'google-wallet',
    Gratipay: 'gratipay',
    Grav: 'grav',
    Gripfire: 'gripfire',
    Grunt: 'grunt',
    Gulp: 'gulp',
    HackerNews: 'hacker-news',
    HackerNewsSquare: 'hacker-news-square',
    Hackerrank: 'hackerrank',
    Hips: 'hips',
    HireAHelper: 'hire-a-helper',
    Hooli: 'hooli',
    Hornbill: 'hornbill',
    Hotjar: 'hotjar',
    Houzz: 'houzz',
    Html5: 'html5',
    Hubspot: 'hubspot',
    Imdb: 'imdb',
    Instagram: 'instagram',
    InternetExplorer: 'internet-explorer',
    Ioxhost: 'ioxhost',
    Itunes: 'itunes',
    ItunesNote: 'itunes-note',
    Java: 'java',
    JediOrder: 'jedi-order',
    Jenkins: 'jenkins',
    Joget: 'joget',
    Joomla: 'joomla',
    Js: 'js',
    JsSquare: 'js-square',
    Jsfiddle: 'jsfiddle',
    Kaggle: 'kaggle',
    Keybase: 'keybase',
    Keycdn: 'keycdn',
    Kickstarter: 'kickstarter',
    KickstarterK: 'kickstarter-k',
    Korvue: 'korvue',
    Laravel: 'laravel',
    Lastfm: 'lastfm',
    LastfmSquare: 'lastfm-square',
    Leanpub: 'leanpub',
    Less: 'less',
    Line: 'line',
    Linkedin: 'linkedin',
    LinkedinIn: 'linkedin-in',
    Linode: 'linode',
    Linux: 'linux',
    Lyft: 'lyft',
    Magento: 'magento',
    Mailchimp: 'mailchimp',
    Mandalorian: 'mandalorian',
    Markdown: 'markdown',
    Mastodon: 'mastodon',
    Maxcdn: 'maxcdn',
    Medapps: 'medapps',
    Medium: 'medium',
    MediumM: 'medium-m',
    Medrt: 'medrt',
    Meetup: 'meetup',
    Megaport: 'megaport',
    Microsoft: 'microsoft',
    Mix: 'mix',
    Mixcloud: 'mixcloud',
    Mizuni: 'mizuni',
    Modx: 'modx',
    Monero: 'monero',
    Napster: 'napster',
    Neos: 'neos',
    Nimblr: 'nimblr',
    NintendoSwitch: 'nintendo-switch',
    Node: 'node',
    NodeJs: 'node-js',
    Npm: 'npm',
    Ns8: 'ns8',
    Nutritionix: 'nutritionix',
    Odnoklassniki: 'odnoklassniki',
    OdnoklassnikiSquare: 'odnoklassniki-square',
    OldRepublic: 'old-republic',
    Opencart: 'opencart',
    Openid: 'openid',
    Opera: 'opera',
    OptinMonster: 'optin-monster',
    Osi: 'osi',
    Page4: 'page4',
    Pagelines: 'pagelines',
    Palfed: 'palfed',
    Patreon: 'patreon',
    Paypal: 'paypal',
    PennyArcade: 'penny-arcade',
    Periscope: 'periscope',
    Phabricator: 'phabricator',
    PhoenixFramework: 'phoenix-framework',
    PhoenixSquadron: 'phoenix-squadron',
    Php: 'php',
    PiedPiper: 'pied-piper',
    PiedPiperAlt: 'pied-piper-alt',
    PiedPiperHat: 'pied-piper-hat',
    PiedPiperPp: 'pied-piper-pp',
    Pinterest: 'pinterest',
    PinterestP: 'pinterest-p',
    PinterestSquare: 'pinterest-square',
    Playstation: 'playstation',
    ProductHunt: 'product-hunt',
    Pushed: 'pushed',
    Python: 'python',
    Qq: 'qq',
    Quinscape: 'quinscape',
    Quora: 'quora',
    RProject: 'r-project',
    Ravelry: 'ravelry',
    React: 'react',
    Reacteurope: 'reacteurope',
    Readme: 'readme',
    Rebel: 'rebel',
    RedRiver: 'red-river',
    Reddit: 'reddit',
    RedditAlien: 'reddit-alien',
    RedditSquare: 'reddit-square',
    Renren: 'renren',
    Replyd: 'replyd',
    Researchgate: 'researchgate',
    Resolving: 'resolving',
    Rev: 'rev',
    Rocketchat: 'rocketchat',
    Rockrms: 'rockrms',
    Safari: 'safari',
    Sass: 'sass',
    Schlix: 'schlix',
    Scribd: 'scribd',
    Searchengin: 'searchengin',
    Sellcast: 'sellcast',
    Sellsy: 'sellsy',
    Servicestack: 'servicestack',
    Shirtsinbulk: 'shirtsinbulk',
    Shopware: 'shopware',
    Simplybuilt: 'simplybuilt',
    Sistrix: 'sistrix',
    Sith: 'sith',
    Skyatlas: 'skyatlas',
    Skype: 'skype',
    Slack: 'slack',
    SlackHash: 'slack-hash',
    Slideshare: 'slideshare',
    Snapchat: 'snapchat',
    SnapchatGhost: 'snapchat-ghost',
    SnapchatSquare: 'snapchat-square',
    Soundcloud: 'soundcloud',
    Speakap: 'speakap',
    Spotify: 'spotify',
    Squarespace: 'squarespace',
    StackExchange: 'stack-exchange',
    StackOverflow: 'stack-overflow',
    Staylinked: 'staylinked',
    Steam: 'steam',
    SteamSquare: 'steam-square',
    SteamSymbol: 'steam-symbol',
    StickerMule: 'sticker-mule',
    Strava: 'strava',
    Stripe: 'stripe',
    StripeS: 'stripe-s',
    Studiovinari: 'studiovinari',
    Stumbleupon: 'stumbleupon',
    StumbleuponCircle: 'stumbleupon-circle',
    Superpowers: 'superpowers',
    Supple: 'supple',
    Teamspeak: 'teamspeak',
    Telegram: 'telegram',
    TelegramPlane: 'telegram-plane',
    TencentWeibo: 'tencent-weibo',
    TheRedYeti: 'the-red-yeti',
    Themeco: 'themeco',
    Themeisle: 'themeisle',
    ThinkPeaks: 'think-peaks',
    TradeFederation: 'trade-federation',
    Trello: 'trello',
    Tripadvisor: 'tripadvisor',
    Tumblr: 'tumblr',
    TumblrSquare: 'tumblr-square',
    Twitch: 'twitch',
    Twitter: 'twitter',
    TwitterSquare: 'twitter-square',
    Typo3: 'typo3',
    Uber: 'uber',
    Uikit: 'uikit',
    Uniregistry: 'uniregistry',
    Untappd: 'untappd',
    Usb: 'usb',
    Ussunnah: 'ussunnah',
    Vaadin: 'vaadin',
    Viacoin: 'viacoin',
    Viadeo: 'viadeo',
    ViadeoSquare: 'viadeo-square',
    Viber: 'viber',
    Vimeo: 'vimeo',
    VimeoSquare: 'vimeo-square',
    VimeoV: 'vimeo-v',
    Vine: 'vine',
    Vk: 'vk',
    Vnv: 'vnv',
    Vuejs: 'vuejs',
    Weebly: 'weebly',
    Weibo: 'weibo',
    Weixin: 'weixin',
    Whatsapp: 'whatsapp',
    WhatsappSquare: 'whatsapp-square',
    Whmcs: 'whmcs',
    WikipediaW: 'wikipedia-w',
    Windows: 'windows',
    Wix: 'wix',
    WizardsOfTheCoast: 'wizards-of-the-coast',
    WolfPackBattalion: 'wolf-pack-battalion',
    Wordpress: 'wordpress',
    WordpressSimple: 'wordpress-simple',
    Wpbeginner: 'wpbeginner',
    Wpexplorer: 'wpexplorer',
    Wpforms: 'wpforms',
    Wpressr: 'wpressr',
    Xbox: 'xbox',
    Xing: 'xing',
    XingSquare: 'xing-square',
    YCombinator: 'y-combinator',
    Yahoo: 'yahoo',
    Yandex: 'yandex',
    YandexInternational: 'yandex-international',
    Yelp: 'yelp',
    Yoast: 'yoast',
    Youtube: 'youtube',
    YoutubeSquare: 'youtube-square',
    Zhihu: 'zhihu'
} as const;

export type WishlistIconEnum = typeof WishlistIconEnum[keyof typeof WishlistIconEnum];

/**
 *
 * @export
 * @interface WishlistItem
 */
export interface WishlistItem {
    /**
     *
     * @type {number}
     * @memberof WishlistItem
     */
    'id': number;
    /**
     *
     * @type {BeckersUser}
     * @memberof WishlistItem
     */
    'owner': BeckersUser;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'url': string;
    /**
     *
     * @type {number}
     * @memberof WishlistItem
     */
    'price': number;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'addedOn': string;
    /**
     *
     * @type {BeckersUser}
     * @memberof WishlistItem
     */
    'purchasedBy'?: BeckersUser;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'purchasedOn'?: string;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'purchaseEvent'?: WishlistItemPurchaseEventEnum;
    /**
     *
     * @type {boolean}
     * @memberof WishlistItem
     */
    'deleted': boolean;
  /**
   *
   * @type {Wishlist}
   * @memberof WishlistItem
   */
  'wishlist': Wishlist;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'remarks'?: string;
    /**
     *
     * @type {string}
     * @memberof WishlistItem
     */
    'store': string;
  /**
   * Indicates if the URL is a valid URL
   * @type {boolean}
   * @memberof WishlistItem
   */
  'hasValidUrl': boolean;
}

export const WishlistItemPurchaseEventEnum = {
    Christmas: 'CHRISTMAS',
    Birthday: 'BIRTHDAY'
} as const;

export type WishlistItemPurchaseEventEnum = typeof WishlistItemPurchaseEventEnum[keyof typeof WishlistItemPurchaseEventEnum];

/**
 *
 * @export
 * @interface WishlistItemCreate
 */
export interface WishlistItemCreate {
  /**
   *
   * @type {string}
   * @memberof WishlistItemCreate
   */
  'description': string;
  /**
   *
   * @type {string}
   * @memberof WishlistItemCreate
   */
  'url': string;
  /**
   *
   * @type {number}
   * @memberof WishlistItemCreate
   */
  'price': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemCreate
   */
  'remarks'?: string;
}
/**
 *
 * @export
 * @interface WishlistItemUpdate
 */
export interface WishlistItemUpdate {
  /**
   *
   * @type {number}
   * @memberof WishlistItemUpdate
   */
  'wishlistId': number;
  /**
   *
   * @type {number}
   * @memberof WishlistItemUpdate
   */
  'itemId': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemUpdate
   */
  'description': string;
  /**
   *
   * @type {string}
   * @memberof WishlistItemUpdate
   */
  'url': string;
  /**
   *
   * @type {number}
   * @memberof WishlistItemUpdate
   */
  'price': number;
  /**
   *
   * @type {string}
   * @memberof WishlistItemUpdate
   */
  'remarks'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Login
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doLogin: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('doLogin', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


          localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassPage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/reset-pass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Login
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doLogin(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.doLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassPage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassPage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.resetPassPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         *
         * @summary Login
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<JwtResponse> {
            return localVarFp.doLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassPage(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.resetPassPage(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     *
     * @summary Login
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public doLogin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).doLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public resetPassPage(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).resetPassPage(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
      /**
       *
       * @param {number} listId
       * @param {WishlistItemCreate} wishlistItemCreate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      addItem: async (listId: number, wishlistItemCreate: WishlistItemCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('addItem', 'listId', listId)
        // verify required parameter 'wishlistItemCreate' is not null or undefined
        assertParamExists('addItem', 'wishlistItemCreate', wishlistItemCreate)
        const localVarPath = `/api/lists/{listId}/items`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(wishlistItemCreate, localVarRequestOptions, configuration)

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
      },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists/own/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

          // authentication jwt required
          // http bearer authentication required
          await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      buyItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('buyItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('buyItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}/buy`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      deleteItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('deleteItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('deleteItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      getItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('getItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('getItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list by ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getListById', 'id', id)
            const localVarPath = `/api/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get own lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists/own`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


          setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {WishlistItemUpdate} wishlistItemUpdate
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      saveItem: async (listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('saveItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('saveItem', 'itemId', itemId)
        // verify required parameter 'wishlistItemUpdate' is not null or undefined
        assertParamExists('saveItem', 'wishlistItemUpdate', wishlistItemUpdate)
        const localVarPath = `/api/lists/{listId}/items/{itemId}`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        localVarHeaderParameter['Content-Type'] = 'application/json';

        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        localVarRequestOptions.data = serializeDataIfNeeded(wishlistItemUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ListFBO} obj
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveList: async (obj: ListFBO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obj' is not null or undefined
            assertParamExists('saveList', 'obj', obj)
            const localVarPath = `/api/lists/own/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

          const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (obj !== undefined) {
                for (const [key, value] of Object.entries(obj)) {
                    localVarQueryParameter[key] = value;
                }
            }


          setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

          return {
            url: toPathString(localVarUrlObj),
            options: localVarRequestOptions,
          };
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      unbuyItem: async (listId: number, itemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
        // verify required parameter 'listId' is not null or undefined
        assertParamExists('unbuyItem', 'listId', listId)
        // verify required parameter 'itemId' is not null or undefined
        assertParamExists('unbuyItem', 'itemId', itemId)
        const localVarPath = `/api/lists/{listId}/items/{itemId}/unbuy`
          .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
          .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (configuration) {
          baseOptions = configuration.baseOptions;
        }

        const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication jwt required
        // http bearer authentication required
        await setBearerAuthToObject(localVarHeaderParameter, configuration)


        setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} listId
         * @param {WishlistItemCreate} wishlistItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItem(listId: number, wishlistItemCreate: WishlistItemCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItem>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.addItem(listId, wishlistItemCreate, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.addItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.addList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
      },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async buyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.buyItem(listId, itemId, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.buyItem']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(listId, itemId, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.deleteItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wishlist>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.getAllLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItem>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(listId, itemId, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.getItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
         * @summary Get list by ID
       * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wishlist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.getListById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get own lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wishlist>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.lists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {WishlistItemUpdate} wishlistItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveItem(listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistItem>> {
          const localVarAxiosArgs = await localVarAxiosParamCreator.saveItem(listId, itemId, wishlistItemUpdate, options);
          const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
          const localVarOperationServerBasePath = operationServerMap['ListsApi.saveItem']?.[localVarOperationServerIndex]?.url;
          return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
      /**
       *
       * @param {ListFBO} obj
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveList(obj: ListFBO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveList(obj, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.saveList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
      },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async unbuyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
        const localVarAxiosArgs = await localVarAxiosParamCreator.unbuyItem(listId, itemId, options);
        const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
        const localVarOperationServerBasePath = operationServerMap['ListsApi.unbuyItem']?.[localVarOperationServerIndex]?.url;
        return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         *
         * @param {number} listId
         * @param {WishlistItemCreate} wishlistItemCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItem(listId: number, wishlistItemCreate: WishlistItemCreate, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItem> {
          return localVarFp.addItem(listId, wishlistItemCreate, options).then((request) => request(axios, basePath));
        },
      /**
       *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addList(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addList(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
          return localVarFp.buyItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
        return localVarFp.deleteItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
      /**
       *
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists(options?: RawAxiosRequestConfig): AxiosPromise<Array<Wishlist>> {
            return localVarFp.getAllLists(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItem> {
          return localVarFp.getItem(listId, itemId, options).then((request) => request(axios, basePath));
        },
      /**
       *
         * @summary Get list by ID
       * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Wishlist> {
            return localVarFp.getListById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get own lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lists(options?: RawAxiosRequestConfig): AxiosPromise<Array<Wishlist>> {
            return localVarFp.lists(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} listId
         * @param {number} itemId
         * @param {WishlistItemUpdate} wishlistItemUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveItem(listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options?: RawAxiosRequestConfig): AxiosPromise<WishlistItem> {
          return localVarFp.saveItem(listId, itemId, wishlistItemUpdate, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @param {ListFBO} obj
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveList(obj: ListFBO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.saveList(obj, options).then((request) => request(axios, basePath));
        },
      /**
       *
       * @param {number} listId
       * @param {number} itemId
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      unbuyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
        return localVarFp.unbuyItem(listId, itemId, options).then((request) => request(axios, basePath));
      },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
  /**
   *
   * @param {number} listId
   * @param {WishlistItemCreate} wishlistItemCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public addItem(listId: number, wishlistItemCreate: WishlistItemCreate, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).addItem(listId, wishlistItemCreate, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public addList(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).addList(options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public buyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).buyItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public deleteItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).deleteItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @summary Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public getAllLists(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).getAllLists(options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public getItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).getItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @summary Get list by ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public getListById(id: number, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).getListById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get own lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public lists(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).lists(options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {WishlistItemUpdate} wishlistItemUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public saveItem(listId: number, itemId: number, wishlistItemUpdate: WishlistItemUpdate, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).saveItem(listId, itemId, wishlistItemUpdate, options).then((request) => request(this.axios, this.basePath));
  }

    /**
     *
     * @param {ListFBO} obj
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public saveList(obj: ListFBO, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).saveList(obj, options).then((request) => request(this.axios, this.basePath));
    }

  /**
   *
   * @param {number} listId
   * @param {number} itemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public unbuyItem(listId: number, itemId: number, options?: RawAxiosRequestConfig) {
    return ListsApiFp(this.configuration).unbuyItem(listId, itemId, options).then((request) => request(this.axios, this.basePath));
  }
}



